{
  "success": true,
  "function_name": "add_numbers",
  "file_path": "test_project_v2/math_utils.py",
  "specification": {
    "raw_specification": "```json\n{\n  \"function_specification\": {\n    \"function_name\": \"add_numbers\",\n    \"file_path\": \"test_project_v2/math_utils.py\",\n    \"description\": \"This function adds two numbers.\",\n    \"complexity\": 1,\n    \"imports\": [],\n    \"signature\": {\n      \"parameters\": [\n        {\n          \"name\": \"a\",\n          \"type\": \"number\",\n          \"description\": \"The first number to add. Can be int or float.\",\n          \"example_values\": [2, 3.14, -5]\n        },\n        {\n          \"name\": \"b\",\n          \"type\": \"number\",\n          \"description\": \"The second number to add. Can be int or float.\",\n          \"example_values\": [5, 1.618, 0]\n        }\n      ],\n      \"return_type\": \"number\",\n      \"return_value_description\": \"The sum of the two input numbers (a + b).\",\n      \"return_value_examples\": [7, 4.758, -5]\n    },\n    \"internal_logic\": {\n      \"description\": \"The function calculates the sum of the two input parameters.\",\n      \"control_flow\": \"The function consists of a single return statement.\",\n      \"steps\": [\n        \"Calculate the sum of 'a' and 'b'.\",\n        \"Return the calculated sum.\"\n      ],\n       \"operators\": [\"+\"]\n    },\n    \"variables\": [\n      {\n        \"name\": \"a\",\n        \"purpose\": \"The first input number.\"\n      },\n      {\n        \"name\": \"b\",\n        \"purpose\": \"The second input number.\"\n      }\n    ],\n    \"comments_and_docstrings\": {\n      \"docstring\": \"Add two numbers\",\n      \"inline_comments\": []\n    },\n    \"error_handling\": {\n      \"description\": \"No specific error handling is implemented. If non-numeric types are provided, the Python interpreter's type error will be raised.\",\n      \"error_types\": []\n    },\n    \"edge_cases\": {\n      \"description\": \"No explicit handling of edge cases is implemented. Standard Python behavior will apply.\",\n      \"examples\": [\n        {\"a\": 0, \"b\": 0, \"expected_result\": 0, \"description\": \"Adding zero to zero\"},\n        {\"a\": 1e10, \"b\": 1e10, \"expected_result\": 2e10, \"description\": \"Adding very large numbers\"},\n        {\"a\": -1e10, \"b\": 1e10, \"expected_result\": 0.0, \"description\": \"Adding large negative and positive number\"},\n        {\"a\": float('inf'), \"b\": 1, \"expected_result\": float('inf'), \"description\": \"Adding infinity\"},\n        {\"a\": float('-inf'), \"b\": 1, \"expected_result\": float('-inf'), \"description\": \"Adding negative infinity\"}\n      ]\n    },\n    \"dependencies\": [],\n    \"side_effects\": \"None. This function has no side effects.\",\n    \"additional_details\": {\n      \"coding_style\": \"Follows standard Python conventions. Should be simple and readable.\",\n      \"naming_conventions\": \"Follows standard Python naming conventions (snake_case for variable names).\",\n      \"indentation\": \"Uses 4 spaces for indentation.\",\n      \"line_length\": \"Lines should be no longer than 79 characters.\",\n      \"blank_lines\": \"One blank line between the function signature and the body.\"\n    },\n    \"example_usage\": {\n      \"example1\": {\n        \"code\": \"result = add_numbers(5, 3)\\nprint(result)\",\n        \"expected_output\": \"8\"\n      },\n      \"example2\": {\n        \"code\": \"result = add_numbers(2.5, 7.5)\\nprint(result)\",\n        \"expected_output\": \"10.0\"\n      }\n    }\n  }\n}\n```",
    "parsed": false
  },
  "complexity": 1,
  "dependencies": [],
  "original_code": "def add_numbers(a, b):\n    \"\"\"Add two numbers\"\"\"\n    return a + b",
  "imports": []
}